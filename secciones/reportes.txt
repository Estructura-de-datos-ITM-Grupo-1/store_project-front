import streamlit as st
import pandas as pd
import backend_logic.reportes as backend_reportes

def pantalla_reportes():
    st.markdown(
        """
        <style>
        .stTitle {
            font-size: 2.5rem;
            font-weight: 700;
            color: #4B6584;
            margin-bottom: 0.2rem;
        }
        .section-header {
            color: #3867d6;
            font-weight: 600;
            margin-top: 1.5rem;
            margin-bottom: 0.8rem;
        }
        .small-desc {
            color: #8395a7;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }
        .stDownloadButton>button {
            background-color: #3867d6;
            color: white;
            border-radius: 8px;
            padding: 8px 20px;
            font-weight: 600;
        }
        </style>
        """, unsafe_allow_html=True)

    st.markdown('<h1 class="stTitle">ðŸ“Š Reportes</h1>', unsafe_allow_html=True)
    st.markdown('<p class="small-desc">Explora las siguientes secciones para obtener informaciÃ³n detallada:</p>', unsafe_allow_html=True)
    st.markdown("""
        - ðŸ“¦ Reportes de inventario  
        - ðŸ’… Reportes de servicios realizados  
        - ðŸ‘¥ Clientes frecuentes  
        - ðŸ“ˆ DesempeÃ±o financiero del negocio  
    """)

    st.markdown("---")

    # === Reporte Movimientos de Inventario ===
    st.markdown('<h3 class="section-header">ðŸ“¦ Reporte de Movimientos de Inventario</h3>', unsafe_allow_html=True)

    df = backend_reportes.cargar_movimientos_inventario()
    hoy = pd.Timestamp.today().normalize()

    modo_filtro_inv = st.radio("Filtrar por:", ["Tipo de reporte", "Rango de fechas manual"], horizontal=True, key="modo_filtro_inventario")

    if modo_filtro_inv == "Tipo de reporte":
        tipo_reporte = st.selectbox("Tipo de reporte", ["Diario", "Semanal", "Mensual", "Anual"], key="tipo_reporte_inv")

        if tipo_reporte == "Diario":
            fecha_inicio_inv = hoy
            fecha_fin_inv = hoy
        elif tipo_reporte == "Semanal":
            fecha_inicio_inv = hoy - pd.Timedelta(days=7)
            fecha_fin_inv = hoy
        elif tipo_reporte == "Mensual":
            fecha_inicio_inv = hoy - pd.DateOffset(months=1)
            fecha_fin_inv = hoy
        elif tipo_reporte == "Anual":
            fecha_inicio_inv = hoy - pd.DateOffset(years=1)
            fecha_fin_inv = hoy

        st.info(f"Mostrando resultados del **{fecha_inicio_inv.date()}** al **{fecha_fin_inv.date()}**")
    else:
        col1, col2 = st.columns(2)
        with col1:
            fecha_inicio_inv = st.date_input("ðŸ“… Fecha inicio", df['Fecha'].min().date(), key="fecha_inicio_inv")
        with col2:
            fecha_fin_inv = st.date_input("ðŸ“… Fecha fin", df['Fecha'].max().date(), key="fecha_fin_inv")

    fecha_inicio_inv = pd.to_datetime(fecha_inicio_inv)
    fecha_fin_inv = pd.to_datetime(fecha_fin_inv)

    col1, col2, col3 = st.columns(3)
    with col1:
        tipos = st.multiselect("ðŸ“‚ Tipo de movimiento", df['Tipo'].unique(), default=df['Tipo'].unique(), key="tipos_inv")
    with col2:
        productos = st.multiselect("ðŸ’„ Producto", df['Producto'].unique(), default=df['Producto'].unique(), key="productos_inv")
    with col3:
        responsables = st.multiselect("ðŸ‘¤ Responsable", df['Responsable'].unique(), default=df['Responsable'].unique(), key="responsables_inv")

    df_filtrado = df[
        (df['Fecha'] >= fecha_inicio_inv) &
        (df['Fecha'] <= fecha_fin_inv) &
        (df['Tipo'].isin(tipos)) &
        (df['Producto'].isin(productos)) &
        (df['Responsable'].isin(responsables))
    ]

    st.dataframe(df_filtrado.style.set_properties(**{'background-color': '#f0f5f9', 'color': '#222'}))

    excel_data = backend_reportes.convertir_a_excel(df_filtrado)
    st.download_button(
        label="ðŸ“¥ Descargar Excel",
        data=excel_data,
        file_name='reporte_movimientos_inventario.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    st.markdown("---")

    # === Reporte de Servicios Realizados ===
    st.markdown('<h3 class="section-header">ðŸ’… Reporte de Servicios Realizados</h3>', unsafe_allow_html=True)

    df_srv = backend_reportes.cargar_servicios()
    modo_filtro_srv = st.radio("Filtrar por:", ["Tipo de reporte", "Rango de fechas manual"], horizontal=True, key="modo_filtro_servicios")

    if modo_filtro_srv == "Tipo de reporte":
        tipo_reporte_srv = st.selectbox("Tipo de reporte", ["Diario", "Semanal", "Mensual", "Anual"], key="tipo_reporte_srv")

        if tipo_reporte_srv == "Diario":
            fecha_inicio_srv = hoy
            fecha_fin_srv = hoy
        elif tipo_reporte_srv == "Semanal":
            fecha_inicio_srv = hoy - pd.Timedelta(days=7)
            fecha_fin_srv = hoy
        elif tipo_reporte_srv == "Mensual":
            fecha_inicio_srv = hoy - pd.DateOffset(months=1)
            fecha_fin_srv = hoy
        elif tipo_reporte_srv == "Anual":
            fecha_inicio_srv = hoy - pd.DateOffset(years=1)
            fecha_fin_srv = hoy

        st.info(f"Mostrando resultados del **{fecha_inicio_srv.date()}** al **{fecha_fin_srv.date()}**")
    else:
        col1, col2 = st.columns(2)
        with col1:
            fecha_inicio_srv = st.date_input("ðŸ“… Fecha inicio", df_srv['Fecha'].min().date(), key="fecha_inicio_srv")
        with col2:
            fecha_fin_srv = st.date_input("ðŸ“… Fecha fin", df_srv['Fecha'].max().date(), key="fecha_fin_srv")

    fecha_inicio_srv = pd.to_datetime(fecha_inicio_srv)
    fecha_fin_srv = pd.to_datetime(fecha_fin_srv)

    col1, col2 = st.columns(2)
    with col1:
        empleados = st.multiselect("ðŸ‘¤ Empleado", options=df_srv['Empleado'].unique(), default=df_srv['Empleado'].unique(), key="empleados_srv")
    with col2:
        servicios = st.multiselect("ðŸ’… Servicio", options=df_srv['Servicio'].unique(), default=df_srv['Servicio'].unique(), key="servicios_srv")

    df_srv_filtrado = df_srv[
        (df_srv['Fecha'] >= fecha_inicio_srv) &
        (df_srv['Fecha'] <= fecha_fin_srv) &
        (df_srv['Empleado'].isin(empleados)) &
        (df_srv['Servicio'].isin(servicios))
    ]

    st.dataframe(df_srv_filtrado.style.set_properties(**{'background-color': '#f0f5f9', 'color': '#222'}))

    excel_srv = backend_reportes.convertir_a_excel(df_srv_filtrado)
    st.download_button(
        label="ðŸ“¥ Descargar Excel (Servicios)",
        data=excel_srv,
        file_name='reporte_servicios.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    st.markdown("---")

    # === Clientes frecuentes ===
    st.markdown('<h3 class="section-header">ðŸ‘¥ Reporte de Clientes Frecuentes</h3>', unsafe_allow_html=True)

    df_cli = backend_reportes.cargar_clientes()
    modo_filtro_cli = st.radio("Filtrar por:", ["Tipo de reporte", "Rango de fechas manual"], horizontal=True, key="modo_filtro_clientes")

    if modo_filtro_cli == "Tipo de reporte":
        tipo_reporte_cli = st.selectbox("Tipo de reporte", ["Diario", "Semanal", "Mensual", "Anual"], key="tipo_reporte_cli")
        if tipo_reporte_cli == "Diario":
            fecha_inicio = hoy
            fecha_fin = hoy
        elif tipo_reporte_cli == "Semanal":
            fecha_inicio = hoy - pd.Timedelta(days=7)
            fecha_fin = hoy
        elif tipo_reporte_cli == "Mensual":
            fecha_inicio = hoy - pd.DateOffset(months=1)
            fecha_fin = hoy
        elif tipo_reporte_cli == "Anual":
            fecha_inicio = hoy - pd.DateOffset(years=1)
            fecha_fin = hoy
    else:
        col1, col2 = st.columns(2)
        with col1:
            fecha_inicio = st.date_input("ðŸ“… Fecha inicio", df_cli['Fecha'].min().date(), key="fecha_inicio_cli")
        with col2:
            fecha_fin = st.date_input("ðŸ“… Fecha fin", df_cli['Fecha'].max().date(), key="fecha_fin_cli")

    fecha_inicio = pd.to_datetime(fecha_inicio)
    fecha_fin = pd.to_datetime(fecha_fin)

    df_filtrado = df_cli[(df_cli['Fecha'] >= fecha_inicio) & (df_cli['Fecha'] <= fecha_fin)]

    resumen = df_filtrado.groupby('Cliente').agg(
        Compras=('Cliente', 'count'),
        Total_gastado=('Monto', 'sum')
    ).reset_index().sort_values(by='Compras', ascending=False)

    st.dataframe(resumen.style.format({"Total_gastado": "${:,.2f}"}).set_properties(**{'background-color': '#f0f5f9', 'color': '#222'}))

    excel_data = backend_reportes.convertir_a_excel(resumen)
    st.download_button(
        label="ðŸ“¥ Descargar Excel (Clientes Frecuentes)",
        data=excel_data,
        file_name='reporte_clientes_frecuentes.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    st.markdown("---")

    # === DesempeÃ±o Financiero ===
    st.markdown('<h3 class="section-header">ðŸ“ˆ DesempeÃ±o Financiero del Negocio</h3>', unsafe_allow_html=True)

    modo = st.radio("Visualizar por:", ["Diario", "Semanal", "Mensual", "Anual"], horizontal=True)

    df_fin = backend_reportes.generar_datos_financieros(modo)
    df_fin = df_fin.sort_values("Fecha").set_index("Fecha")

    st.dataframe(df_fin.style.format({"Ingresos": "${:,.2f}", "Egresos": "${:,.2f}"}).set_properties(**{'background-color': '#f0f5f9', 'color': '#222'}))
    st.line_chart(df_fin[["Ingresos", "Egresos"]])

